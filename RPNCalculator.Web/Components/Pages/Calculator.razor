@page "/calculator"
@rendermode InteractiveServer
@using RPNCalculator.Common


<!-- Start of the Frontend Code-->

<!-- Set the page title -->
<PageTitle>RPN Calculator</PageTitle>

<!-- Page heading -->
<h1>RPN Calculator</h1>

<!-- History container -->
<div class="history">
    <!-- Display area for calculator history (not implemented yet but designed) -->
    <button @onclick="@(() => history(" "))">History</button> <!-- History button -->
</div>

<!-- Undo container -->
<div class="undo">
    <!-- Display area for calculator undo-->
    <button @onclick="@(() => AddOperator("Undo"))">Undo</button>
</div>

    <!-- Calculator container -->
<div class="calculator">
    <!-- Display area for calculator input/output -->
    <div class="display">
        <!-- Stack view-->
        <div class="stack-view">
            <h2>Stack</h2>
            <div class="stack-container">
                <ul>
                    @foreach (var item in calc.GetTopStackItems())
                    {
                        <li>@item</li>
                    }
                </ul>
            </div>
        </div>
        <!-- Input text -->
        <input type="text" @bind="displayValue" readonly />
    </div>

    <!-- Buttons container -->
    <div class="buttons">
        <!-- column of buttons -->
        <div class="row">
            <button class="clear" @onclick="Clear">CLR</button> <!-- Button to clear input -->
            <button class="operator" @onclick="@(() => AddOperator("sin()"))">sin()</button>
            <button class="operator" @onclick="@(() => AddOperator("arcsin()"))">arcsin()</button>
            <button class="operator" @onclick="@(() => AddOperator("π"))">π</button>
        </div>

        <!-- Repeat similar structure for other column of buttons -->
        <!-- Each button has an associated onclick event handler -->
        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator(null))">+/-</button>
            <button class="operator" @onclick="@(() => AddOperator("cos()"))">cos()</button>
            <button class="operator" @onclick="@(() => AddOperator("arccos()"))">arccos()</button>
            <button class="operator" @onclick="@(() => AddOperator("x!"))">x!</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("/"))">/ </button>
            <button class="operator" @onclick="@(() => AddOperator("tan()"))">tan()</button>
            <button class="operator" @onclick="@(() => AddOperator("arctan()"))">arctan()</button>
            <button class="operator" @onclick="@(() => AddOperator("x^y"))">x^y</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("*"))">x</button>
            <button class="operator" @onclick="@(() => AddOperator("LN"))">ln</button>
            <button class="operator" @onclick="@(() => AddOperator("e^x"))">e^x</button>
            <button class="operator" @onclick="@(() => AddOperator("x^2"))">x^2</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("LOG"))">log</button>
            <button @onclick="@(() => AddNumber("7"))">7</button>
            <button @onclick="@(() => AddNumber("4"))">4</button>
            <button @onclick="@(() => AddNumber("1"))">1</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("√ x"))">√ x</button>
            <button @onclick="@(() => AddNumber("8"))">8</button>
            <button @onclick="@(() => AddNumber("5"))">5</button>
            <button @onclick="@(() => AddNumber("2"))">2</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("y√x"))">y√x</button>
            <button @onclick="@(() => AddNumber("9"))">9</button>
            <button @onclick="@(() => AddNumber("6"))">6</button>
            <button @onclick="@(() => AddNumber("3"))">3</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("e"))">e</button>
            <button class="operator" @onclick="@(() => AddOperator("-"))">-</button>
            <button class="operator" @onclick="@(() => AddOperator("+"))">+</button>
            <button class="operator" @onclick="@(() => AddOperator("."))">.</button>
        </div>

        <div class="row">
            <button @onclick="@(() => AddNumber(" "))"> </button> <!-- Empty button -->
        </div>

        <div class="row">
            <button @onclick="@(() => AddNumber("0"))">0</button>
        </div>

        <div class="row">
            <button @onclick="@(() => AddNumber(" "))"> </button> <!-- Empty button -->
        </div>

        <div class="row">
            <button class="enter" @onclick="Enter">Enter</button> <!-- Button to trigger calculation -->
        </div>
    </div>
</div>

<!-- Start of the Backend Code-->
@code {

    // Instantiate the calculator
    private RPNCalculator.Common.Calculator calc = new RPNCalculator.Common.Calculator();
    private string displayValue = string.Empty;
    private string currentInput = string.Empty;

    private void history(string value)
    {
    }

    // Method to add a number to the calculator
    private void AddNumber(string number)
    {
        calc.pressNumber(number[0]); 
        displayValue = calc.DisplayString;
    }

    // Method to add an operator to the calculator
    private void AddOperator(string op)
    {
        calc.pressOperator(op); 
        displayValue = calc.DisplayString;

    }

    // Method to handle the "Enter" button click
    private void Enter()
    {
        calc.pressEnter(); 
        displayValue = calc.DisplayString;

    }

    // Method to handle the "Clear" button click
    private void Clear()
    {
        calc.pressClear(); 
        displayValue = calc.DisplayString;
        currentInput = string.Empty;

    }
}