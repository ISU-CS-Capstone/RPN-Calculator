@page "/calculator"
@rendermode InteractiveServer
@using RPNCalculator.Common
@using System.Threading.Tasks
@using System.Timers

<!-- Start of the Frontend Code-->

@*
    Author: Victoria Weir
    Description: Frontend design on the Web
    Responsibility: Set up and design the frontend of the Web on Blazor
    Certification: I certify that I wrote this code myself.
*@

<!-- Set the page title -->
<PageTitle>RPN Calculator</PageTitle>

<!-- Page heading -->
<h1>RPN Calculator</h1>

    <!-- Calculator container -->
<div class="calculator">
    <!-- Display area for calculator input/output -->
    <div class="display">
        <!-- Stack view-->
        <div class="stack-view">
            <h2>Stack</h2>
            <div class="stack-container">
                <ul>
                    @{
                        var ending = new[] { "st", "nd", "rd", "th", "th" };
                        var itemCount = stackItems.Count;
                        for(int i = 0; i<stackItems.Count; i++){
                            var index = itemCount - i;
                            <li>@index@(ending[Math.Min(index -1, 4)]): @stackItems[i]</li>
                        }
                     }
                </ul>
            </div>
        </div>
        <!-- Input text -->
        <input type="text" @bind="displayValue" readonly />
    </div>

    <!-- Undo, toggle, and float container -->
    <div class="float">
        <!-- Display area for calculator undo, toggle, and float-->
        <button @onclick="@(() => AddOperator("Undo"))">Undo </button>

        <button @onclick="@ToggleView">@ToggleViewButtonText</button>

        <button @onclick="@(() => AddOperator("removeFloat"))">.0 ← </button>
        <button @onclick="@(() => AddOperator("addFloat"))"> → .00</button>

    </div>

    @if (showCalculator)
    {
        <!-- Buttons container -->    
        <div class="buttons">
            <!-- column of buttons -->
        <div class="row">
            <button class="clear" @onclick="Clear">CLR</button> <!-- Button to clear input -->
            <button class="operator" @onclick="@(() => AddOperator("sin()"))">sin()</button>
            <button class="operator" @onclick="@(() => AddOperator("arcsin()"))">arcsin()</button>
            <button class="operator" @onclick="@(() => AddOperator("π"))">π</button>
        </div>

        <!-- Repeat similar structure for other column of buttons -->
        <!-- Each button has an associated onclick event handler -->
        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("+/-"))">+/-</button>
            <button class="operator" @onclick="@(() => AddOperator("cos()"))">cos()</button>
            <button class="operator" @onclick="@(() => AddOperator("arccos()"))">arccos()</button>
            <button class="operator" @onclick="@(() => AddOperator("x!"))">x!</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("/"))">/ </button>
            <button class="operator" @onclick="@(() => AddOperator("tan()"))">tan()</button>
            <button class="operator" @onclick="@(() => AddOperator("arctan()"))">arctan()</button>
            <button class="operator" @onclick="@(() => AddOperator("x^y"))">x^y</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("x"))">x</button>
            <button class="operator" @onclick="@(() => AddOperator("LN"))">ln</button>
            <button class="operator" @onclick="@(() => AddOperator("eⁿ"))">e^x</button>
            <button class="operator" @onclick="@(() => AddOperator("x^2"))">x^2</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("LOG"))">log</button>
            <button @onclick="@(() => AddNumber("7"))">7</button>
            <button @onclick="@(() => AddNumber("4"))">4</button>
            <button @onclick="@(() => AddNumber("1"))">1</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("√x"))">√ x</button>
            <button @onclick="@(() => AddNumber("8"))">8</button>
            <button @onclick="@(() => AddNumber("5"))">5</button>
            <button @onclick="@(() => AddNumber("2"))">2</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("y√x"))">y√x</button>
            <button @onclick="@(() => AddNumber("9"))">9</button>
            <button @onclick="@(() => AddNumber("6"))">6</button>
            <button @onclick="@(() => AddNumber("3"))">3</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("e"))">e</button>
            <button class="operator" @onclick="@(() => AddOperator("-"))">-</button>
            <button class="operator" @onclick="@(() => AddOperator("+"))">+</button>
            <button class="operator" @onclick="@(() => AddNumber("."))">.</button>
        </div>

        <div class="row">
            <button @onclick="@(() => AddNumber(" "))"> </button> <!-- Empty button -->
        </div>

        <div class="row">
            <button @onclick="@(() => AddNumber("0"))">0</button>
        </div>

        <div class="row">
            <button @onclick="@(() => AddNumber(" "))"> </button> <!-- Empty button -->
        </div>

        <div class="row">
            <button class="enter" @onclick="Enter">Enter</button> <!-- Button to trigger calculation -->
        </div>
    </div>
    }

    else{
    <!-- Alternative view for inputting code -->
    <div class="userDefineFunction">
        <p>Custom Function Input: Write your custom function below.</p>

        <!-- Example of the expected function signature -->
        <p>
            Example Function:
            public double entryFunction(ref Stack&lt;string&gt; stack){
            stack.Push(1);
            return stack.Pop(1);
            }
        </p>

        <p>public class Calculator{</p>

        <!-- Text area for user to input custom function -->
        <textarea id="customFunctionTextArea" @bind="customFunctionCode" rows="10" cols="50"></textarea>
        <p>}</p>

        <!-- Button to compile and run the custom function -->
        <button @onclick="CompileAndRun">Compile and Run</button>
    </div>
    }
</div>

<!-- Start of the Backend Code-->
@code {
    // Instantiate the calculator
    private RPNCalculator.Common.Calculator calc = new RPNCalculator.Common.Calculator();
    private string displayValue = string.Empty;
    private string currentInput = string.Empty;
    private List<string> stackItems = new List<string>();
    private Timer timer;

    private bool showCalculator = true;
    private string codeInput = string.Empty;

    @*
    Author: Victoria Weir
    Description: Created a asynchornous operation where it runs when called
    Responsibility: Figure out a way to constantly update the stack list view
    Certification: I certify that I wrote this code myself.
*@
    protected override Task OnInitializedAsync()
    {
        // Set up the timer
        timer = new Timer();
        timer.Interval = 1000; // Update interval in milliseconds (e.g., every second)
        timer.Elapsed += TimerElapsed;

        // Start the timer
        timer.Start();

        return base.OnInitializedAsync();
    }

    @*
    Author: Victoria Weir
    Description: Method to handle the timer elapsed even and then updates the top stack list
    Responsibility: Continuation of setting up a timer to reload the stack list
    Certification: I certify that I wrote this code myself.
*@
    // Method to handle the timer elapsed event
    private void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        // Update the list of top stack items
        UpdateStackItems();
    }

    @*
    Author: Victoria Weir
    Description: Updates the list of top stack
    Responsibility: Part of the backend and frontend connection to get the top stack items
    Certification: I certify that I wrote this code myself.
*@
    // Method to update the list of top stack items
    private void UpdateStackItems()
    {
        // Get the top stack items from the calculator
        stackItems = calc.GetTopStackItems().ToList();

        // Invoke the UI refresh
        InvokeAsync(StateHasChanged);
    }

    @*
    Author: Victoria Weir
    Description: Backend on the Web
    Responsibility: Connect the backend common to web backend for the next following four methods
    Certification: I certify that I wrote this code myself.
*@
    // Method to add a number to the calculator
    private void AddNumber(string number)
    {
        calc.pressNumber(number[0]); 
        displayValue = calc.DisplayString;
    }

    // Method to add an operator to the calculator
    private void AddOperator(string op)
    {
        calc.pressOperator(op); 
        displayValue = calc.DisplayString;

    }

    // Method to handle the "Enter" button click
    private void Enter()
    {
        calc.pressEnter(); 
        displayValue = calc.DisplayString;

    }

    // Method to handle the "Clear" button click
    private void Clear()
    {
        calc.pressClear(); 
        displayValue = calc.DisplayString;
        currentInput = string.Empty;

    }

    @*
    Author: Victoria Weir
    Description: Stop timer and releases all rescources used by the system
    Responsibility: Part of the timer
    Certification: I certify that I wrote this code myself.
*@
    // Dispose method to stop the timer and prevent memory leaks
    public void Dispose()
    {
        timer?.Dispose();
    }

    @*
    Author: Victoria Weir
    Description: Backend connection to frontend. Makes sure that once toggle view can change back and forth
    Responsibility: Visual changes when pushing the button. Connecting the backend to frontend
    Certification: I certify that I wrote this code myself.
*@
    // Method to toggle between calculator view and code input view
    private void ToggleView()
    {
        showCalculator = !showCalculator;
    }

    @*
    Author: Victoria Weir
    Description: This changes the two different views. ? is a short way of doing if-else statements. 
    Responsibility: Visual change to the frontend and connect it to backend.
    Certification: I certify that I wrote this code myself.
*@
    // Property to change the text of the toggle button based on the current view
    private string ToggleViewButtonText => showCalculator ? "Switch to Input Code" : "Switch to Calculator View";

    @*
    Author: Craig Price
    Description: Connect the backend common's custom function to web backend
    Responsibility: User defined function for the backend
    Certification: I certify that I wrote this code myself.
*@
    // Property to bind the user input for the custom function
    private string customFunctionCode { get; set; }

    // Method to handle compiling and running the code
    private void CompileAndRun()
    {
        calc.userDefinedFunction(customFunctionCode);
        displayValue = calc.DisplayString;
        customFunctionCode = "";
    }
 }