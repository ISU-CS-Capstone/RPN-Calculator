@page "/calculator"
@rendermode InteractiveServer

<!-- Set the page title -->
<PageTitle>RPN Calculator</PageTitle>

<!-- Page heading -->
<h1>RPN Calculator</h1>

<!-- History container -->
<div class="history">
    <!-- Display area for calculator history (not implemented yet but designed) -->
    <button @onclick="@(() => history(" "))">History</button> <!-- History button -->
</div>

    <!-- Calculator container -->
<div class="calculator">
    <!-- Display area for calculator input/output -->
    <div class="display">
        <!-- Stack view-->
        <div class="stack-view">
            <h2>Stack</h2>
            <div class="stack-container">
                <ul>
                    <li>1</li>
                    <li>2</li>
                    <li>3</li>
                </ul>
            </div>
        </div>
        <!-- Input text -->
        <input type="text" @bind="displayValue" readonly />
    </div>

    <!-- Buttons container -->
    <div class="buttons">
        <!-- column of buttons -->
        <div class="row">
            <button class="clear" @onclick="Clear">CLR</button> <!-- Button to clear input -->
            <button class="operator" @onclick="@(() => AddOperator("sin()"))">sin()</button>
            <button class="operator" @onclick="@(() => AddOperator("arcsin()"))">arcsin()</button>
            <button class="operator" @onclick="@(() => AddOperator("pi"))">π</button>
        </div>

        <!-- Repeat similar structure for other column of buttons -->
        <!-- Each button has an associated onclick event handler -->
        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator(null))">+/-</button>
            <button class="operator" @onclick="@(() => AddOperator("cos()"))">cos()</button>
            <button class="operator" @onclick="@(() => AddOperator("arccos()"))">arccos()</button>
            <button class="operator" @onclick="@(() => AddOperator("x!"))">x!</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("/"))">/ </button>
            <button class="operator" @onclick="@(() => AddOperator("tan()"))">tan()</button>
            <button class="operator" @onclick="@(() => AddOperator("arctan()"))">arctan()</button>
            <button class="operator" @onclick="@(() => AddOperator("x^y"))">x^y</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("*"))">x</button>
            <button class="operator" @onclick="@(() => AddOperator("ln"))">ln</button>
            <button class="operator" @onclick="@(() => AddOperator("e^x"))">e^x</button>
            <button class="operator" @onclick="@(() => AddOperator("x^2"))">x^2</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("log"))">log</button>
            <button @onclick="@(() => AddNumber("7"))">7</button> <!-- Button to add number 7 -->
            <button @onclick="@(() => AddNumber("4"))">4</button> <!-- Button to add number 4 -->
            <button @onclick="@(() => AddNumber("1"))">1</button> <!-- Button to add number 1 -->
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("√ x"))">√ x</button>
            <button @onclick="@(() => AddNumber("8"))">8</button>
            <button @onclick="@(() => AddNumber("5"))">5</button>
            <button @onclick="@(() => AddNumber("2"))">2</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("y√ x"))">y√ x</button>
            <button @onclick="@(() => AddNumber("9"))">9</button>
            <button @onclick="@(() => AddNumber("6"))">6</button>
            <button @onclick="@(() => AddNumber("3"))">3</button>
        </div>

        <div class="row">
            <button class="operator" @onclick="@(() => AddOperator("e"))">e</button>
            <button class="operator" @onclick="@(() => AddOperator("-"))">-</button>
            <button class="operator" @onclick="@(() => AddOperator("+"))">+</button>
            <button class="operator" @onclick="@(() => AddOperator("."))">.</button>
        </div>

        <div class="row">
            <button @onclick="@(() => AddNumber(" "))"> </button> <!-- Empty button -->
        </div>

        <div class="row">
            <button @onclick="@(() => AddNumber("0"))">0</button> <!-- Button for number 0 -->
        </div>

        <div class="row">
            <button @onclick="@(() => AddNumber(" "))"> </button> <!-- Empty button -->
        </div>

        <div class="row">
            <button class="enter" @onclick="Enter">Enter</button> <!-- Button to trigger calculation -->
        </div>
    </div>
</div>

@code {
    private CalculatorWeb calculator = new CalculatorWeb();
    private const int items = 5;
    private string displayValue = string.Empty;
    private string currentInput = string.Empty;
    private bool isOperator = false;

    private void history(string value)
    {
    }

    private void AddNumber(string value)
    {
        if (value != " ")
        {
            currentInput += value;
            displayValue += value;
            isOperator = false;
        }
    }

    private void AddOperator(string op = null)
    {
        if (!isOperator)
        {
            if (!string.IsNullOrEmpty(currentInput))
            {
                calculator.Push(decimal.Parse(currentInput));
                currentInput = string.Empty;
            }

            if (op != null)
            {
                switch (op)
                {
                    case "+":
                        calculator.Add();
                        break;
                    case "-":
                        calculator.Subtract();
                        break;
                    case "*":
                        calculator.Multiply();
                        break;
                    case "/":
                        calculator.Divide();
                        break;
                }
            }

            displayValue = calculator.GetStackContent();
            isOperator = true;
        }
    }

    private void Enter()
    {
        if (!string.IsNullOrEmpty(currentInput))
        {
            calculator.Push(decimal.Parse(currentInput));
            currentInput = string.Empty;
        }

        displayValue = calculator.GetStackContent();
    }

    private void Clear()
    {
        calculator.Clear();
        displayValue = string.Empty;
        currentInput = string.Empty;
    }
    
}